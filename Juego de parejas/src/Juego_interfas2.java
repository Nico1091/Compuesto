
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JOptionPane;
import javax.swing.Timer;

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
/**
 *
 * @author ESTUDIANTE05
 */
public class Juego_interfas2 extends javax.swing.JFrame {

    /**
     * Creates new form Juego_interfas2 sector para declarar las cosas publicas
     */
    Metodos.Procesos pro = new Metodos.Procesos();
    /// public Timer tiempo;
    int nivel = 0;
    int matrizJ[][] = new int[5][5];
    int valor_ant;
    int puntosJ = 0, fallasJ = 0, fallas_totalJ = 3;
    JButton valor_boton = new JButton();
    String foto = "/imagenes/fondo.png";

    public Juego_interfas2() {
        initComponents();
        setTitle("El juego de parejas");

        etiquetafalla.setEnabled(false);
        fallas.setEnabled(false);
        etiquetade.setEnabled(false);
        limite_fallas.setEnabled(false);
        etiquetapuntos.setEnabled(false);
        puntos.setEnabled(false);
        etiquetanivel.setEnabled(false);
        selector.setEnabled(false);
        generar.setEnabled(false);
        limpiar.setEnabled(false);
        pausar.setEnabled(false);

        ///  tiempo = new Timer (3000, null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        boton1 = new javax.swing.JButton();
        boton2 = new javax.swing.JButton();
        boton3 = new javax.swing.JButton();
        boton4 = new javax.swing.JButton();
        boton5 = new javax.swing.JButton();
        boton8 = new javax.swing.JButton();
        boton9 = new javax.swing.JButton();
        boton10 = new javax.swing.JButton();
        boton6 = new javax.swing.JButton();
        boton7 = new javax.swing.JButton();
        boton13 = new javax.swing.JButton();
        boton14 = new javax.swing.JButton();
        boton15 = new javax.swing.JButton();
        boton18 = new javax.swing.JButton();
        boton19 = new javax.swing.JButton();
        boton20 = new javax.swing.JButton();
        boton16 = new javax.swing.JButton();
        boton11 = new javax.swing.JButton();
        boton17 = new javax.swing.JButton();
        boton12 = new javax.swing.JButton();
        boton25 = new javax.swing.JButton();
        boton21 = new javax.swing.JButton();
        boton22 = new javax.swing.JButton();
        boton23 = new javax.swing.JButton();
        boton24 = new javax.swing.JButton();
        iniciar = new javax.swing.JButton();
        pausar = new javax.swing.JButton();
        selector = new javax.swing.JComboBox<>();
        etiquetanivel = new javax.swing.JLabel();
        generar = new javax.swing.JButton();
        limpiar = new javax.swing.JButton();
        salir = new javax.swing.JButton();
        etiquetafalla = new javax.swing.JLabel();
        fallas = new javax.swing.JTextField();
        etiquetade = new javax.swing.JLabel();
        limite_fallas = new javax.swing.JTextField();
        etiquetapuntos = new javax.swing.JLabel();
        puntos = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(204, 204, 204));

        boton1.setBackground(new java.awt.Color(153, 153, 153));
        boton1.setForeground(new java.awt.Color(153, 204, 255));
        boton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/fondo.png"))); // NOI18N
        boton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                boton1ActionPerformed(evt);
            }
        });

        boton2.setBackground(new java.awt.Color(153, 153, 153));
        boton2.setForeground(new java.awt.Color(102, 255, 255));
        boton2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/fondo.png"))); // NOI18N
        boton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                boton2ActionPerformed(evt);
            }
        });

        boton3.setBackground(new java.awt.Color(153, 153, 153));
        boton3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/fondo.png"))); // NOI18N
        boton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                boton3ActionPerformed(evt);
            }
        });

        boton4.setBackground(new java.awt.Color(153, 153, 153));
        boton4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/fondo.png"))); // NOI18N
        boton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                boton4ActionPerformed(evt);
            }
        });

        boton5.setBackground(new java.awt.Color(204, 204, 204));
        boton5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/fondo.png"))); // NOI18N
        boton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                boton5ActionPerformed(evt);
            }
        });

        boton8.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/fondo.png"))); // NOI18N
        boton8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                boton8ActionPerformed(evt);
            }
        });

        boton9.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/fondo.png"))); // NOI18N
        boton9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                boton9ActionPerformed(evt);
            }
        });

        boton10.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/fondo.png"))); // NOI18N
        boton10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                boton10ActionPerformed(evt);
            }
        });

        boton6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/fondo.png"))); // NOI18N
        boton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                boton6ActionPerformed(evt);
            }
        });

        boton7.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/fondo.png"))); // NOI18N
        boton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                boton7ActionPerformed(evt);
            }
        });

        boton13.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/fondo.png"))); // NOI18N
        boton13.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                boton13ActionPerformed(evt);
            }
        });

        boton14.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/fondo.png"))); // NOI18N
        boton14.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                boton14ActionPerformed(evt);
            }
        });

        boton15.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/fondo.png"))); // NOI18N
        boton15.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                boton15ActionPerformed(evt);
            }
        });

        boton18.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/fondo.png"))); // NOI18N
        boton18.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                boton18ActionPerformed(evt);
            }
        });

        boton19.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/fondo.png"))); // NOI18N
        boton19.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                boton19ActionPerformed(evt);
            }
        });

        boton20.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/fondo.png"))); // NOI18N
        boton20.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                boton20ActionPerformed(evt);
            }
        });

        boton16.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/fondo.png"))); // NOI18N
        boton16.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                boton16ActionPerformed(evt);
            }
        });

        boton11.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/fondo.png"))); // NOI18N
        boton11.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                boton11ActionPerformed(evt);
            }
        });

        boton17.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/fondo.png"))); // NOI18N
        boton17.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                boton17ActionPerformed(evt);
            }
        });

        boton12.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/fondo.png"))); // NOI18N
        boton12.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                boton12ActionPerformed(evt);
            }
        });

        boton25.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/fondo.png"))); // NOI18N
        boton25.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                boton25ActionPerformed(evt);
            }
        });

        boton21.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/fondo.png"))); // NOI18N
        boton21.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                boton21ActionPerformed(evt);
            }
        });

        boton22.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/fondo.png"))); // NOI18N
        boton22.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                boton22ActionPerformed(evt);
            }
        });

        boton23.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/fondo.png"))); // NOI18N
        boton23.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                boton23ActionPerformed(evt);
            }
        });

        boton24.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/fondo.png"))); // NOI18N
        boton24.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                boton24ActionPerformed(evt);
            }
        });

        iniciar.setText("Iniciar");
        iniciar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                iniciarActionPerformed(evt);
            }
        });

        pausar.setText("Pausa");
        pausar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pausarActionPerformed(evt);
            }
        });

        selector.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "1", "2", "3" }));
        selector.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectorActionPerformed(evt);
            }
        });

        etiquetanivel.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        etiquetanivel.setText("Nivel:");

        generar.setText("Generar");
        generar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                generarActionPerformed(evt);
            }
        });

        limpiar.setText("Limpiar");
        limpiar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                limpiarActionPerformed(evt);
            }
        });

        salir.setText("Salir");
        salir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                salirActionPerformed(evt);
            }
        });

        etiquetafalla.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        etiquetafalla.setText("Fallas:");

        fallas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fallasActionPerformed(evt);
            }
        });

        etiquetade.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        etiquetade.setText("de");

        etiquetapuntos.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        etiquetapuntos.setText("Puntos:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(274, 274, 274)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(generar)
                                .addGap(18, 18, 18)
                                .addComponent(limpiar)
                                .addGap(18, 18, 18)
                                .addComponent(salir))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(pausar)
                                .addGap(15, 15, 15)
                                .addComponent(iniciar)))
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(boton1, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(boton2, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(boton16, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                                    .addComponent(boton11, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                                    .addComponent(boton6, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(boton7, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(boton12, javax.swing.GroupLayout.PREFERRED_SIZE, 76, Short.MAX_VALUE)
                                    .addComponent(boton17, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(boton21, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(boton22, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGap(18, 18, Short.MAX_VALUE)
                                .addComponent(boton3, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(boton4, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(boton5, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(851, 851, 851))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                .addComponent(boton13, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                                                .addComponent(boton8, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addComponent(boton18, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                                .addGap(18, 18, 18)
                                                .addComponent(boton19, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                .addGroup(layout.createSequentialGroup()
                                                    .addGap(20, 20, 20)
                                                    .addComponent(boton9, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                .addGroup(layout.createSequentialGroup()
                                                    .addGap(18, 18, 18)
                                                    .addComponent(boton14, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)))))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addComponent(boton23, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(boton24, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(boton25, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(layout.createSequentialGroup()
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addComponent(boton10, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                                                    .addComponent(boton15, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                                                .addGap(45, 45, 45))
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(boton20, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(41, 41, 41)))
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(etiquetapuntos)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addComponent(puntos, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(etiquetafalla, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(fallas, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(18, 18, 18)
                                                .addComponent(etiquetade, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(limite_fallas, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(etiquetanivel, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(18, 18, 18)
                                                .addComponent(selector, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                        .addGap(638, 638, 638))))))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(boton2, javax.swing.GroupLayout.PREFERRED_SIZE, 104, Short.MAX_VALUE)
                    .addComponent(boton4, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(boton3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(boton5, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(boton1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(27, 27, 27)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(boton8, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(boton6, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(boton9, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(boton10, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(boton14, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                                    .addComponent(boton13, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                                    .addComponent(boton11, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                                    .addComponent(boton12, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(boton15, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)))
                            .addComponent(boton7, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(boton19, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                            .addComponent(boton18, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                            .addComponent(boton17, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                            .addComponent(boton16, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(boton20, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(73, 73, 73)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(etiquetafalla, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(fallas, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(etiquetade, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(limite_fallas, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(46, 46, 46)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(etiquetapuntos, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(puntos, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(58, 58, 58)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(etiquetanivel, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(3, 3, 3)
                                .addComponent(selector, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(boton22, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                        .addComponent(boton21, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(boton24, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                        .addComponent(boton23, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(boton25, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(34, 34, 34)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(generar, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(limpiar, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(salir, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(pausar, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(iniciar, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(83, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void boton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_boton4ActionPerformed
        // TODO add your handling code here:
        
                boton4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/icono" + matrizJ[0][3] + ".png"))); ///Asigna un icono nuevo al boton cuando cambia de estado.
        
        Timer timer = new Timer(3000, null);

        
          timer.addActionListener(new ActionListener() {
                        @Override
                        public void actionPerformed(ActionEvent evt) {
        if (matrizJ == null) {
            JOptionPane.showMessageDialog(null, "No generaste matriz, por favor dale a generar :3");
        } else {
            if (valor_ant == matrizJ[0][3] && valor_ant != 0) {
                boton4.setEnabled(false);
                valor_boton.setEnabled(false);
                puntosJ++;
                puntos.setText(puntosJ + "");
            } else {
                if (matrizJ[0][3] == 0) {

                    
                    boton4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/icono1.png"))); ///
                    boton4.setEnabled(true);
                    fallasJ++;
                    fallas.setText(fallas + "");
                    fallas_totalJ--;
                    limite_fallas.setText(fallas_totalJ + "");
                } else {
                    boton4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/fondo.png")));
                    valor_boton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/fondo.png")));
                    fallasJ++;
                    fallas.setText(fallas + "");
                    fallas_totalJ--;
                    limite_fallas.setText(fallas_totalJ + "");
                    if (fallas_totalJ == 0) {
                        JOptionPane.showMessageDialog(null, "Acabaste el limite de fallas, GAME OVER");

                    }

                }

            
        }
                        }
        valor_ant = matrizJ[0][3];
        valor_boton = boton4;
        
        }
          });
                            

                        

                    timer.setRepeats(false);
                    timer.start();
    }//GEN-LAST:event_boton4ActionPerformed

    private void boton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_boton5ActionPerformed
        // TODO add your handling code here:
        
                boton5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/icono" + matrizJ[0][4] + ".png"))); ///Asigna un icono nuevo al boton cuando cambia de estado.
        
        Timer timer = new Timer(3000, null);

        
          timer.addActionListener(new ActionListener() {
                        @Override
                        public void actionPerformed(ActionEvent evt) {
        if (matrizJ == null) {
            JOptionPane.showMessageDialog(null, "No generaste matriz, por favor dale a generar :3");
        } else {
            if (valor_ant == matrizJ[0][4] && valor_ant != 0) {
                boton5.setEnabled(false);
                valor_boton.setEnabled(false);
                puntosJ++;
                puntos.setText(puntosJ + "");
            } else {
                if (matrizJ[0][4] == 0) {

       
                    boton5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/icono3.png"))); ///
                    boton5.setEnabled(true);
                    fallasJ++;
                    fallas.setText(fallas + "");
                    fallas_totalJ--;
                    limite_fallas.setText(fallas_totalJ + "");
                } else {
                    boton5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/fondo.png")));
                    valor_boton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/fondo.png")));
                    fallasJ++;
                    fallas.setText(fallas + "");
                    fallas_totalJ--;
                    limite_fallas.setText(fallas_totalJ + "");
                    if (fallas_totalJ == 0) {
                        JOptionPane.showMessageDialog(null, "Acabaste el limite de fallas, GAME OVER");

                    }

                }

            
        }
                        }
        valor_ant = matrizJ[0][4];
        valor_boton = boton5;
        
        }
          });
                            

                        

                    timer.setRepeats(false);
                    timer.start();
    }//GEN-LAST:event_boton5ActionPerformed

    private void boton9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_boton9ActionPerformed
        // TODO add your handling code here:
        boton9.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/icono" + matrizJ[1][3] + ".png"))); ///Asigna un icono nuevo al boton cuando cambia de estado.
        
        Timer timer = new Timer(3000, null);

        
          timer.addActionListener(new ActionListener() {
                        @Override
                        public void actionPerformed(ActionEvent evt) {
        if (matrizJ == null) {
            JOptionPane.showMessageDialog(null, "No generaste matriz, por favor dale a generar :3");
        } else {
            if (valor_ant == matrizJ[1][3] && valor_ant != 0) {
                boton9.setEnabled(false);
                valor_boton.setEnabled(false);
                puntosJ++;
                puntos.setText(puntosJ + "");
            } else {
                if (matrizJ[1][3] == 0) {

 
                    boton9.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/icono8.png"))); ///
                    boton9.setEnabled(true);
                    fallasJ++;
                    fallas.setText(fallas + "");
                    fallas_totalJ--;
                    limite_fallas.setText(fallas_totalJ + "");
                } else {
                    boton9.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/fondo.png")));
                    valor_boton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/fondo.png")));
                    fallasJ++;
                    fallas.setText(fallas + "");
                    fallas_totalJ--;
                    limite_fallas.setText(fallas_totalJ + "");
                    if (fallas_totalJ == 0) {
                        JOptionPane.showMessageDialog(null, "Acabaste el limite de fallas, GAME OVER");

                    }

                }

            
        }
                        }
        valor_ant = matrizJ[1][3];
        valor_boton = boton9;
        
        }
          });
                            

                        

                    timer.setRepeats(false);
                    timer.start();
    }//GEN-LAST:event_boton9ActionPerformed

    private void boton10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_boton10ActionPerformed
        // TODO add your handling code here:
        boton10.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/icono" + matrizJ[1][4] + ".png"))); ///Asigna un icono nuevo al boton cuando cambia de estado.
        
        Timer timer = new Timer(3000, null);

        
          timer.addActionListener(new ActionListener() {
                        @Override
                        public void actionPerformed(ActionEvent evt) {
        if (matrizJ == null) {
            JOptionPane.showMessageDialog(null, "No generaste matriz, por favor dale a generar :3");
        } else {
            if (valor_ant == matrizJ[1][4] && valor_ant != 0) {
                boton10.setEnabled(false);
                valor_boton.setEnabled(false);
                puntosJ++;
                puntos.setText(puntosJ + "");
            } else {
                if (matrizJ[1][4] == 0) {

                    
                    boton10.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/icono5.png"))); ///
                    boton10.setEnabled(true);
                    fallasJ++;
                    fallas.setText(fallas + "");
                    fallas_totalJ--;
                    limite_fallas.setText(fallas_totalJ + "");
                } else {
                    boton10.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/fondo.png")));
                    valor_boton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/fondo.png")));
                    fallasJ++;
                    fallas.setText(fallas + "");
                    fallas_totalJ--;
                    limite_fallas.setText(fallas_totalJ + "");
                    if (fallas_totalJ == 0) {
                        JOptionPane.showMessageDialog(null, "Acabaste el limite de fallas, GAME OVER");

                    }

                }

            
        }
                        }
        valor_ant = matrizJ[1][4];
        valor_boton = boton10;
        
        }
          });
                            

                        

                    timer.setRepeats(false);
                    timer.start();
    }//GEN-LAST:event_boton10ActionPerformed

    private void boton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_boton6ActionPerformed
        // TODO add your handling code here:
        
        boton6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/icono" + matrizJ[1][0] + ".png"))); ///Asigna un icono nuevo al boton cuando cambia de estado.
        
        Timer timer = new Timer(3000, null);

        
          timer.addActionListener(new ActionListener() {
                        @Override
                        public void actionPerformed(ActionEvent evt) {
        if (matrizJ == null) {
            JOptionPane.showMessageDialog(null, "No generaste matriz, por favor dale a generar :3");
        } else {
            if (valor_ant == matrizJ[1][0] && valor_ant != 0) {
                boton6.setEnabled(false);
                valor_boton.setEnabled(false);
                puntosJ++;
                puntos.setText(puntosJ + "");
            } else {
                if (matrizJ[1][0] == 0) {

                    JOptionPane.showMessageDialog(null, "Carta trampa, sumaste una falla >:D");
                    boton6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/trampa.png"))); ///
                    boton6.setEnabled(false);
                    fallasJ++;
                    fallas.setText(fallas + "");
                    fallas_totalJ--;
                    limite_fallas.setText(fallas_totalJ + "");
                } else {
                    boton6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/fondo.png")));
                    valor_boton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/fondo.png")));
                    fallasJ++;
                    fallas.setText(fallas + "");
                    fallas_totalJ--;
                    limite_fallas.setText(fallas_totalJ + "");
                    if (fallas_totalJ == 0) {
                        JOptionPane.showMessageDialog(null, "Acabaste el limite de fallas, GAME OVER");

                    }

                }

            
        }
                        }
        valor_ant = matrizJ[1][0];
        valor_boton = boton6;
        
        }
          });
                            

                        

                    timer.setRepeats(false);
                    timer.start();
    }//GEN-LAST:event_boton6ActionPerformed

    private void boton13ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_boton13ActionPerformed
        // TODO add your handling code here:
        
        boton13.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/icono" + matrizJ[2][2] + ".png"))); ///Asigna un icono nuevo al boton cuando cambia de estado.
        
        Timer timer = new Timer(3000, null);

        
          timer.addActionListener(new ActionListener() {
                        @Override
                        public void actionPerformed(ActionEvent evt) {
        if (matrizJ == null) {
            JOptionPane.showMessageDialog(null, "No generaste matriz, por favor dale a generar :3");
        } else {
            if (valor_ant == matrizJ[2][2] && valor_ant != 0) {
                boton13.setEnabled(false);
                valor_boton.setEnabled(false);
                puntosJ++;
                puntos.setText(puntosJ + "");
            } else {
                if (matrizJ[2][2] == 0) {

                    JOptionPane.showMessageDialog(null, "Carta trampa, sumaste una falla >:D");
                    boton13.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/icono4.png"))); ///
                    boton13.setEnabled(false);
                    fallasJ++;
                    fallas.setText(fallas + "");
                    fallas_totalJ--;
                    limite_fallas.setText(fallas_totalJ + "");
                } else {
                    boton13.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/fondo.png")));
                    valor_boton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/fondo.png")));
                    fallasJ++;
                    fallas.setText(fallas + "");
                    fallas_totalJ--;
                    limite_fallas.setText(fallas_totalJ + "");
                    if (fallas_totalJ == 0) {
                        JOptionPane.showMessageDialog(null, "Acabaste el limite de fallas, GAME OVER");

                    }

                }

            
        }
                        }
        valor_ant = matrizJ[2][2];
        valor_boton = boton13;
        
        }
          });
                            

                        

                    timer.setRepeats(false);
                    timer.start();
    }//GEN-LAST:event_boton13ActionPerformed

    private void boton14ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_boton14ActionPerformed
        // TODO add your handling code here:
        
        boton14.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/icono" + matrizJ[2][3] + ".png"))); ///Asigna un icono nuevo al boton cuando cambia de estado.
        
        Timer timer = new Timer(3000, null);

        
          timer.addActionListener(new ActionListener() {
                        @Override
                        public void actionPerformed(ActionEvent evt) {
        if (matrizJ == null) {
            JOptionPane.showMessageDialog(null, "No generaste matriz, por favor dale a generar :3");
        } else {
            if (valor_ant == matrizJ[2][3] && valor_ant != 0) {
                boton14.setEnabled(false);
                valor_boton.setEnabled(false);
                puntosJ++;
                puntos.setText(puntosJ + "");
            } else {
                if (matrizJ[2][3] == 0) {

                    JOptionPane.showMessageDialog(null, "Carta trampa, sumaste una falla >:D");
                    boton14.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/trampa.png"))); ///
                    boton14.setEnabled(false);
                    fallasJ++;
                    fallas.setText(fallas + "");
                    fallas_totalJ--;
                    limite_fallas.setText(fallas_totalJ + "");
                } else {
                    boton14.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/fondo.png")));
                    valor_boton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/fondo.png")));
                    fallasJ++;
                    fallas.setText(fallas + "");
                    fallas_totalJ--;
                    limite_fallas.setText(fallas_totalJ + "");
                    if (fallas_totalJ == 0) {
                        JOptionPane.showMessageDialog(null, "Acabaste el limite de fallas, GAME OVER");

                    }

                }

            
        }
                        }
        valor_ant = matrizJ[2][3];
        valor_boton = boton14;
        
        }
          });
                            

                        

                    timer.setRepeats(false);
                    timer.start();
    }//GEN-LAST:event_boton14ActionPerformed

    private void boton19ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_boton19ActionPerformed
        // TODO add your handling code here:
        
        boton19.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/icono" + matrizJ[3][3] + ".png"))); ///Asigna un icono nuevo al boton cuando cambia de estado.
        
        Timer timer = new Timer(3000, null);

        
          timer.addActionListener(new ActionListener() {
                        @Override
                        public void actionPerformed(ActionEvent evt) {
        if (matrizJ == null) {
            JOptionPane.showMessageDialog(null, "No generaste matriz, por favor dale a generar :3");
        } else {
            if (valor_ant == matrizJ[3][3] && valor_ant != 0) {
                boton19.setEnabled(false);
                valor_boton.setEnabled(false);
                puntosJ++;
                puntos.setText(puntosJ + "");
            } else {
                if (matrizJ[3][3] == 0) {

                    JOptionPane.showMessageDialog(null, "Carta trampa, sumaste una falla >:D");
                    boton19.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/trampa.png"))); ///
                    boton19.setEnabled(false);
                    fallasJ++;
                    fallas.setText(fallas + "");
                    fallas_totalJ--;
                    limite_fallas.setText(fallas_totalJ + "");
                } else {
                    boton19.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/fondo.png")));
                    valor_boton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/fondo.png")));
                    fallasJ++;
                    fallas.setText(fallas + "");
                    fallas_totalJ--;
                    limite_fallas.setText(fallas_totalJ + "");
                    if (fallas_totalJ == 0) {
                        JOptionPane.showMessageDialog(null, "Acabaste el limite de fallas, GAME OVER");

                    }

                }

            
        }
                        }
        valor_ant = matrizJ[3][3];
        valor_boton = boton19;
        
        }
          });
                            

                        

                    timer.setRepeats(false);
                    timer.start();
    }//GEN-LAST:event_boton19ActionPerformed

    private void boton23ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_boton23ActionPerformed
        // TODO add your handling code here:
        
        boton23.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/icono" + matrizJ[4][2] + ".png"))); ///Asigna un icono nuevo al boton cuando cambia de estado.
        
        Timer timer = new Timer(3000, null);

        
          timer.addActionListener(new ActionListener() {
                        @Override
                        public void actionPerformed(ActionEvent evt) {
        if (matrizJ == null) {
            JOptionPane.showMessageDialog(null, "No generaste matriz, por favor dale a generar :3");
        } else {
            if (valor_ant == matrizJ[4][2] && valor_ant != 0) {
                boton23.setEnabled(false);
                valor_boton.setEnabled(false);
                puntosJ++;
                puntos.setText(puntosJ + "");
            } else {
                if (matrizJ[4][2] == 0) {

                    JOptionPane.showMessageDialog(null, "Carta trampa, sumaste una falla >:D");
                    boton23.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/trampa.png"))); ///
                    boton23.setEnabled(false);
                    fallasJ++;
                    fallas.setText(fallas + "");
                    fallas_totalJ--;
                    limite_fallas.setText(fallas_totalJ + "");
                } else {
                    boton23.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/fondo.png")));
                    valor_boton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/fondo.png")));
                    fallasJ++;
                    fallas.setText(fallas + "");
                    fallas_totalJ--;
                    limite_fallas.setText(fallas_totalJ + "");
                    if (fallas_totalJ == 0) {
                        JOptionPane.showMessageDialog(null, "Acabaste el limite de fallas, GAME OVER");

                    }

                }

            
        }
                        }
        valor_ant = matrizJ[4][2];
        valor_boton = boton23;
        
        }
          });
                            

                        

                    timer.setRepeats(false);
                    timer.start();
    }//GEN-LAST:event_boton23ActionPerformed

    private void limpiarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_limpiarActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_limpiarActionPerformed

    private void fallasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fallasActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_fallasActionPerformed

    private void boton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_boton1ActionPerformed
        // TODO add your handling code here: Boton_1
       
        boton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/icono" + matrizJ[0][0] + ".png"))); ///Asigna un icono nuevo al boton cuando cambia de estado.
        
        Timer timer = new Timer(3000, null);

        
          timer.addActionListener(new ActionListener() {
                        @Override
                        public void actionPerformed(ActionEvent evt) {
        if (matrizJ == null) {
            JOptionPane.showMessageDialog(null, "No generaste matriz, por favor dale a generar :3");
        } else {
            if (valor_ant == matrizJ[0][0] && valor_ant != 0) {
                boton1.setEnabled(false);
                valor_boton.setEnabled(false);
                puntosJ++;
                puntos.setText(puntosJ + "");
            } else {
                if (matrizJ[0][0] == 0) {

                    
                    boton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/icono1.png"))); ///
                    boton1.setEnabled(true);
                    fallasJ++;
                    fallas.setText(fallas + "");
                    fallas_totalJ--;
                    limite_fallas.setText(fallas_totalJ + "");
                } else {
                    boton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/fondo.png")));
                    valor_boton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/fondo.png")));
                    fallasJ++;
                    fallas.setText(fallas + "");
                    fallas_totalJ--;
                    limite_fallas.setText(fallas_totalJ + "");
                    if (fallas_totalJ == 0) {
                        JOptionPane.showMessageDialog(null, "Acabaste el limite de fallas, GAME OVER");

                    }

                }

            
        }
                        }
        valor_ant = matrizJ[0][0];
        valor_boton = boton1;
        
        }
          });
                            

                        

                    timer.setRepeats(false);
                    timer.start();
        
    }//GEN-LAST:event_boton1ActionPerformed

    private void salirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_salirActionPerformed
        // TODO add your handling code here: Boton de salir 
        System.exit(0);
    }//GEN-LAST:event_salirActionPerformed

    private void generarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_generarActionPerformed
        // TODO add your handling code here: Boton de generar, asignar los valores de la matriz a los votones
        String Nivel = selector.getSelectedItem().toString();
        int nivel = Integer.parseInt(Nivel); ///Convierto en indice del combox en un entero

        if (nivel == 1) {
            matrizJ = pro.generar_matriz();
        } else {
            if (nivel == 2) {
                matrizJ = pro.generar_matriz_nivel_2();
            } else {
                if (nivel == 3) {
                    matrizJ = pro.generar_matriz_nivel_3(); ///Este if anidado funciona para seleccionar el nivel del juego
                } else {
                    JOptionPane.showMessageDialog(null, "Por favor selecione un nivel para el juego");
                }
            }
        }
        int boton1 = matrizJ[0][0];
        int boton2 = matrizJ[0][1];
        int boton3 = matrizJ[0][2];
        int boton4 = matrizJ[0][3];
        int boton5 = matrizJ[0][4];
        int boton6 = matrizJ[1][0];
        int boton7 = matrizJ[1][1];
        int boton8 = matrizJ[1][2];
        int boton9 = matrizJ[1][3];
        int boton10 = matrizJ[1][4];
        int boton11 = matrizJ[2][0];
        int boton12 = matrizJ[2][1];
        int boton13 = matrizJ[2][2];
        int boton14 = matrizJ[2][3];
        int boton15 = matrizJ[2][4];
        int boton16 = matrizJ[3][0];
        int boton17 = matrizJ[3][1];
        int boton18 = matrizJ[3][2];
        int boton19 = matrizJ[3][3];
        int boton20 = matrizJ[3][4];
        int boton21 = matrizJ[4][0];
        int boton22 = matrizJ[4][1];
        int boton23 = matrizJ[4][2];
        int boton24 = matrizJ[4][3];
        int boton25 = matrizJ[4][4];
    }//GEN-LAST:event_generarActionPerformed

    private void iniciarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_iniciarActionPerformed
        // TODO add your handling code here: Boton de inicio
        iniciar.setEnabled(false);

        etiquetafalla.setEnabled(true);
        fallas.setEnabled(true);
        etiquetade.setEnabled(true);
        limite_fallas.setEnabled(true);
        etiquetapuntos.setEnabled(true);
        puntos.setEnabled(true);
        etiquetanivel.setEnabled(true);
        selector.setEnabled(true);
        generar.setEnabled(true);
        limpiar.setEnabled(true);
        pausar.setEnabled(true);

    }//GEN-LAST:event_iniciarActionPerformed

    private void pausarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pausarActionPerformed
        // TODO add your handling code here: Boton de pausa
        pausar.setEnabled(false);
        iniciar.setEnabled(true);

        etiquetafalla.setEnabled(false);
        fallas.setEnabled(false);
        etiquetade.setEnabled(false);
        limite_fallas.setEnabled(false);
        etiquetapuntos.setEnabled(false);
        puntos.setEnabled(false);
        etiquetanivel.setEnabled(false);
        selector.setEnabled(false);
        generar.setEnabled(false);
        limpiar.setEnabled(false);
        pausar.setEnabled(false);
    }//GEN-LAST:event_pausarActionPerformed

    private void boton11ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_boton11ActionPerformed
        // TODO add your handling code here:
        
        boton11.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/icono" + matrizJ[2][0] + ".png"))); ///Asigna un icono nuevo al boton cuando cambia de estado.
        
        Timer timer = new Timer(3000, null);

        
          timer.addActionListener(new ActionListener() {
                        @Override
                        public void actionPerformed(ActionEvent evt) {
        if (matrizJ == null) {
            JOptionPane.showMessageDialog(null, "No generaste matriz, por favor dale a generar :3");
        } else {
            if (valor_ant == matrizJ[2][0] && valor_ant != 0) {
                boton11.setEnabled(false);
                valor_boton.setEnabled(false);
                puntosJ++;
                puntos.setText(puntosJ + "");
            } else {
                if (matrizJ[2][0] == 0) {

                    JOptionPane.showMessageDialog(null, "Carta trampa, sumaste una falla >:D");
                    boton11.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/icono4.png"))); ///
                    boton11.setEnabled(false);
                    fallasJ++;
                    fallas.setText(fallas + "");
                    fallas_totalJ--;
                    limite_fallas.setText(fallas_totalJ + "");
                } else {
                    boton11.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/fondo.png")));
                    valor_boton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/fondo.png")));
                    fallasJ++;
                    fallas.setText(fallas + "");
                    fallas_totalJ--;
                    limite_fallas.setText(fallas_totalJ + "");
                    if (fallas_totalJ == 0) {
                        JOptionPane.showMessageDialog(null, "Acabaste el limite de fallas, GAME OVER");

                    }

                }

            
        }
                        }
        valor_ant = matrizJ[2][0];
        valor_boton = boton11;
        
        }
          });
                            

                        

                    timer.setRepeats(false);
                    timer.start();
    }//GEN-LAST:event_boton11ActionPerformed

    private void boton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_boton2ActionPerformed
        // TODO add your handling code here: boton 2
                boton2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/icono" + matrizJ[0][1] + ".png"))); ///Asigna un icono nuevo al boton cuando cambia de estado.
        
        Timer timer = new Timer(3000, null);

        
          timer.addActionListener(new ActionListener() {
                        @Override
                        public void actionPerformed(ActionEvent evt) {
        if (matrizJ == null) {
            JOptionPane.showMessageDialog(null, "No generaste matriz, por favor dale a generar :3");
        } else {
            if (valor_ant == matrizJ[0][1] && valor_ant != 0) {
                boton2.setEnabled(false);
                valor_boton.setEnabled(false);
                puntosJ++;
                puntos.setText(puntosJ + "");
            } else {
                if (matrizJ[0][1] == 0) {

                    JOptionPane.showMessageDialog(null, "Carta trampa, sumaste una falla >:D");
                    boton2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/icono7.png"))); ///
                    boton2.setEnabled(true);
                    fallasJ++;
                    fallas.setText(fallas + "");
                    fallas_totalJ--;
                    limite_fallas.setText(fallas_totalJ + "");
                } else {
                    boton2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/fondo.png")));
                    valor_boton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/fondo.png")));
                    fallasJ++;
                    fallas.setText(fallas + "");
                    fallas_totalJ--;
                    limite_fallas.setText(fallas_totalJ + "");
                    if (fallas_totalJ == 0) {
                        JOptionPane.showMessageDialog(null, "Acabaste el limite de fallas, GAME OVER");

                    }

                }

            
        }
                        }
        valor_ant = matrizJ[0][1];
        valor_boton = boton2;
        
        }
          });
                            

                        

                    timer.setRepeats(false);
                    timer.start();
    }//GEN-LAST:event_boton2ActionPerformed

    private void boton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_boton3ActionPerformed
        // TODO add your handling code here:
        
                boton3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/icono" + matrizJ[0][2] + ".png"))); ///Asigna un icono nuevo al boton cuando cambia de estado.
        
        Timer timer = new Timer(3000, null);

        
          timer.addActionListener(new ActionListener() {
                        @Override
                        public void actionPerformed(ActionEvent evt) {
        if (matrizJ == null) {
            JOptionPane.showMessageDialog(null, "No generaste matriz, por favor dale a generar :3");
        } else {
            if (valor_ant == matrizJ[0][2] && valor_ant != 0) {
                boton3.setEnabled(false);
                valor_boton.setEnabled(false);
                puntosJ++;
                puntos.setText(puntosJ + "");
            } else {
                if (matrizJ[0][2] == 0) {

                    
                    boton3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/icono1.png"))); ///
                    boton3.setEnabled(true);
                    fallasJ++;
                    fallas.setText(fallas + "");
                    fallas_totalJ--;
                    limite_fallas.setText(fallas_totalJ + "");
                } else {
                    boton3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/fondo.png")));
                    valor_boton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/fondo.png")));
                    fallasJ++;
                    fallas.setText(fallas + "");
                    fallas_totalJ--;
                    limite_fallas.setText(fallas_totalJ + "");
                    if (fallas_totalJ == 0) {
                        JOptionPane.showMessageDialog(null, "Acabaste el limite de fallas, GAME OVER");

                    }

                }

            
        }
                        }
        valor_ant = matrizJ[0][2];
        valor_boton = boton3;
        
        }
          });
                            

                        

                    timer.setRepeats(false);
                    timer.start();
    }//GEN-LAST:event_boton3ActionPerformed

    private void boton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_boton7ActionPerformed
        // TODO add your handling code here:
        
        boton7.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/icono" + matrizJ[1][1] + ".png"))); ///Asigna un icono nuevo al boton cuando cambia de estado.
        
        Timer timer = new Timer(3000, null);

        
          timer.addActionListener(new ActionListener() {
                        @Override
                        public void actionPerformed(ActionEvent evt) {
        if (matrizJ == null) {
            JOptionPane.showMessageDialog(null, "No generaste matriz, por favor dale a generar :3");
        } else {
            if (valor_ant == matrizJ[1][1] && valor_ant != 0) {
                boton7.setEnabled(false);
                valor_boton.setEnabled(false);
                puntosJ++;
                puntos.setText(puntosJ + "");
            } else {
                if (matrizJ[1][1] == 0) {
                    boton7.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/icono7.png"))); ///
                    boton7.setEnabled(true);
                    fallasJ++;
                    fallas.setText(fallas + "");
                    fallas_totalJ--;
                    limite_fallas.setText(fallas_totalJ + "");
                } else {
                    boton7.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/fondo.png")));
                    valor_boton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/fondo.png")));
                    fallasJ++;
                    fallas.setText(fallas + "");
                    fallas_totalJ--;
                    limite_fallas.setText(fallas_totalJ + "");
                    if (fallas_totalJ == 0) {
                        JOptionPane.showMessageDialog(null, "Acabaste el limite de fallas, GAME OVER");

                    }

                }

            
        }
                        }
        valor_ant = matrizJ[1][1];
        valor_boton = boton7;
        
        }
          });
                            

                        

                    timer.setRepeats(false);
                    timer.start();
    }//GEN-LAST:event_boton7ActionPerformed

    private void boton8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_boton8ActionPerformed
        // TODO add your handling code here:
        
        boton8.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/icono" + matrizJ[1][2] + ".png"))); ///Asigna un icono nuevo al boton cuando cambia de estado.
        
        Timer timer = new Timer(3000, null);

        
          timer.addActionListener(new ActionListener() {
                        @Override
                        public void actionPerformed(ActionEvent evt) {
        if (matrizJ == null) {
            JOptionPane.showMessageDialog(null, "No generaste matriz, por favor dale a generar :3");
        } else {
            if (valor_ant == matrizJ[1][2] && valor_ant != 0) {
                boton8.setEnabled(false);
                valor_boton.setEnabled(false);
                puntosJ++;
                puntos.setText(puntosJ + "");
            } else {
                if (matrizJ[1][2] == 0) {

                    JOptionPane.showMessageDialog(null, "Carta trampa, sumaste una falla >:D");
                    boton8.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/icono5.png"))); ///
                    boton8.setEnabled(true);
                    fallasJ++;
                    fallas.setText(fallas + "");
                    fallas_totalJ--;
                    limite_fallas.setText(fallas_totalJ + "");
                } else {
                    boton8.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/fondo.png")));
                    valor_boton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/fondo.png")));
                    fallasJ++;
                    fallas.setText(fallas + "");
                    fallas_totalJ--;
                    limite_fallas.setText(fallas_totalJ + "");
                    if (fallas_totalJ == 0) {
                        JOptionPane.showMessageDialog(null, "Acabaste el limite de fallas, GAME OVER");

                    }

                }

            
        }
                        }
        valor_ant = matrizJ[1][2];
        valor_boton = boton8;
        
        }
          });
                            

                        

                    timer.setRepeats(false);
                    timer.start();
    }//GEN-LAST:event_boton8ActionPerformed

    private void boton12ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_boton12ActionPerformed
        // TODO add your handling code here:
        boton12.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/icono" + matrizJ[2][1] + ".png"))); ///Asigna un icono nuevo al boton cuando cambia de estado.
        
        Timer timer = new Timer(3000, null);

        
          timer.addActionListener(new ActionListener() {
                        @Override
                        public void actionPerformed(ActionEvent evt) {
        if (matrizJ == null) {
            JOptionPane.showMessageDialog(null, "No generaste matriz, por favor dale a generar :3");
        } else {
            if (valor_ant == matrizJ[2][1] && valor_ant != 0) {
                boton12.setEnabled(false);
                valor_boton.setEnabled(false);
                puntosJ++;
                puntos.setText(puntosJ + "");
            } else {
                if (matrizJ[2][1] == 0) {

                  
                    boton12.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/trampa.png"))); ///
                    boton12.setEnabled(true);
                    fallasJ++;
                    fallas.setText(fallas + "");
                    fallas_totalJ--;
                    limite_fallas.setText(fallas_totalJ + "");
                } else {
                    boton12.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/fondo.png")));
                    valor_boton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/fondo.png")));
                    fallasJ++;
                    fallas.setText(fallas + "");
                    fallas_totalJ--;
                    limite_fallas.setText(fallas_totalJ + "");
                    if (fallas_totalJ == 0) {
                        JOptionPane.showMessageDialog(null, "Acabaste el limite de fallas, GAME OVER");

                    }

                }

            
        }
                        }
        valor_ant = matrizJ[2][1];
        valor_boton = boton12;
        
        }
          });
                            

                        

                    timer.setRepeats(false);
                    timer.start();
    }//GEN-LAST:event_boton12ActionPerformed

    private void boton15ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_boton15ActionPerformed
        // TODO add your handling code here:
        
        boton15.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/icono" + matrizJ[2][4] + ".png"))); ///Asigna un icono nuevo al boton cuando cambia de estado.
        
        Timer timer = new Timer(3000, null);

        
          timer.addActionListener(new ActionListener() {
                        @Override
                        public void actionPerformed(ActionEvent evt) {
        if (matrizJ == null) {
            JOptionPane.showMessageDialog(null, "No generaste matriz, por favor dale a generar :3");
        } else {
            if (valor_ant == matrizJ[2][4] && valor_ant != 0) {
                boton15.setEnabled(false);
                valor_boton.setEnabled(false);
                puntosJ++;
                puntos.setText(puntosJ + "");
            } else {
                if (matrizJ[2][4] == 0) {

                   
                    boton15.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/icono9.png"))); ///
                    boton15.setEnabled(true);
                    fallasJ++;
                    fallas.setText(fallas + "");
                    fallas_totalJ--;
                    limite_fallas.setText(fallas_totalJ + "");
                } else {
                    boton15.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/fondo.png")));
                    valor_boton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/fondo.png")));
                    fallasJ++;
                    fallas.setText(fallas + "");
                    fallas_totalJ--;
                    limite_fallas.setText(fallas_totalJ + "");
                    if (fallas_totalJ == 0) {
                        JOptionPane.showMessageDialog(null, "Acabaste el limite de fallas, GAME OVER");

                    }

                }

            
        }
                        }
        valor_ant = matrizJ[2][4];
        valor_boton = boton15;
        
        }
          });
                            

                        

                    timer.setRepeats(false);
                    timer.start();
    }//GEN-LAST:event_boton15ActionPerformed

    private void boton16ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_boton16ActionPerformed
        // TODO add your handling code here:
        
        boton16.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/icono" + matrizJ[3][0] + ".png"))); ///Asigna un icono nuevo al boton cuando cambia de estado.
        
        Timer timer = new Timer(3000, null);

        
          timer.addActionListener(new ActionListener() {
                        @Override
                        public void actionPerformed(ActionEvent evt) {
        if (matrizJ == null) {
            JOptionPane.showMessageDialog(null, "No generaste matriz, por favor dale a generar :3");
        } else {
            if (valor_ant == matrizJ[3][0] && valor_ant != 0) {
                boton16.setEnabled(false);
                valor_boton.setEnabled(false);
                puntosJ++;
                puntos.setText(puntosJ + "");
            } else {
                if (matrizJ[3][0] == 0) {

                    JOptionPane.showMessageDialog(null, "Carta trampa, sumaste una falla >:D");
                    boton16.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/trampa.png"))); ///
                    boton16.setEnabled(false);
                    fallasJ++;
                    fallas.setText(fallas + "");
                    fallas_totalJ--;
                    limite_fallas.setText(fallas_totalJ + "");
                } else {
                    boton16.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/fondo.png")));
                    valor_boton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/fondo.png")));
                    fallasJ++;
                    fallas.setText(fallas + "");
                    fallas_totalJ--;
                    limite_fallas.setText(fallas_totalJ + "");
                    if (fallas_totalJ == 0) {
                        JOptionPane.showMessageDialog(null, "Acabaste el limite de fallas, GAME OVER");

                    }

                }

            
        }
                        }
        valor_ant = matrizJ[3][0];
        valor_boton = boton16;
        
        }
          });
                            

                        

                    timer.setRepeats(false);
                    timer.start();
    }//GEN-LAST:event_boton16ActionPerformed

    private void boton17ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_boton17ActionPerformed
        // TODO add your handling code here:
        
        boton17.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/icono" + matrizJ[3][1] + ".png"))); ///Asigna un icono nuevo al boton cuando cambia de estado.
        
        Timer timer = new Timer(3000, null);

        
          timer.addActionListener(new ActionListener() {
                        @Override
                        public void actionPerformed(ActionEvent evt) {
        if (matrizJ == null) {
            JOptionPane.showMessageDialog(null, "No generaste matriz, por favor dale a generar :3");
        } else {
            if (valor_ant == matrizJ[3][1] && valor_ant != 0) {
                boton17.setEnabled(false);
                valor_boton.setEnabled(false);
                puntosJ++;
                puntos.setText(puntosJ + "");
            } else {
                if (matrizJ[3][1] == 0) {

                    JOptionPane.showMessageDialog(null, "Carta trampa, sumaste una falla >:D");
                    boton17.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/trampa.png"))); ///
                    boton17.setEnabled(false);
                    fallasJ++;
                    fallas.setText(fallas + "");
                    fallas_totalJ--;
                    limite_fallas.setText(fallas_totalJ + "");
                } else {
                    boton17.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/fondo.png")));
                    valor_boton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/fondo.png")));
                    fallasJ++;
                    fallas.setText(fallas + "");
                    fallas_totalJ--;
                    limite_fallas.setText(fallas_totalJ + "");
                    if (fallas_totalJ == 0) {
                        JOptionPane.showMessageDialog(null, "Acabaste el limite de fallas, GAME OVER");

                    }

                }

            
        }
                        }
        valor_ant = matrizJ[3][1];
        valor_boton = boton17;
        
        }
          });
                            

                        

                    timer.setRepeats(false);
                    timer.start();
    }//GEN-LAST:event_boton17ActionPerformed

    private void boton18ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_boton18ActionPerformed
        // TODO add your handling code here:
        
        boton18.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/icono" + matrizJ[3][2] + ".png"))); ///Asigna un icono nuevo al boton cuando cambia de estado.
        
        Timer timer = new Timer(3000, null);

        
          timer.addActionListener(new ActionListener() {
                        @Override
                        public void actionPerformed(ActionEvent evt) {
        if (matrizJ == null) {
            JOptionPane.showMessageDialog(null, "No generaste matriz, por favor dale a generar :3");
        } else {
            if (valor_ant == matrizJ[3][2] && matrizJ[3][2] != 0) {
                boton18.setEnabled(false);
                valor_boton.setEnabled(false);
                puntosJ++;
                puntos.setText(puntosJ + "");
            } else {
                if (matrizJ[3][2] == 0) {

                    JOptionPane.showMessageDialog(null, "Carta trampa, sumaste una falla >:D");
                    boton18.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/trampa.png")));
                    valor_boton.setIcon(new javax.swing.ImageIcon(getClass().getResource(foto)));///
                    boton18.setEnabled(false);
                    fallasJ++;
                    fallas.setText(fallasJ + "");
                    fallas_totalJ--;
                    limite_fallas.setText(fallas_totalJ + "");
                } else {
                    boton18.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/fondo.png")));
                    valor_boton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/fondo.png")));
                    fallasJ++;
                    fallas.setText(fallasJ + "");
                    fallas_totalJ--;
                    limite_fallas.setText(fallas_totalJ + "");
                    if (fallas_totalJ == 0) {
                        JOptionPane.showMessageDialog(null, "Acabaste el limite de fallas, GAME OVER");

                    }

                }

            
        }
                        }
        valor_ant = matrizJ[3][2];
        valor_boton = boton18;
        foto = "/imagenes/icono" + matrizJ[3][2] + ".png";
        
        }
          });
                            

                        

                    timer.setRepeats(false);
                    timer.start();
    }//GEN-LAST:event_boton18ActionPerformed

    private void boton20ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_boton20ActionPerformed
        // TODO add your handling code here:
        
        boton20.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/icono" + matrizJ[3][4] + ".png"))); ///Asigna un icono nuevo al boton cuando cambia de estado.
        
        Timer timer = new Timer(3000, null);

        
          timer.addActionListener(new ActionListener() {
                        @Override
                        public void actionPerformed(ActionEvent evt) {
        if (matrizJ == null) {
            JOptionPane.showMessageDialog(null, "No generaste matriz, por favor dale a generar :3");
        } else {
            if (valor_ant == matrizJ[3][4] && matrizJ[3][4] != 0) {
                boton20.setEnabled(false);
                valor_boton.setEnabled(false);
                puntosJ++;
                puntos.setText(puntosJ + "");
            } else {
                if (matrizJ[3][4] == 0) {

                    JOptionPane.showMessageDialog(null, "Carta trampa, sumaste una falla >:D");
                    boton20.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/trampa.png"))); ///
                    boton20.setEnabled(false);
                    fallasJ++;
                    fallas.setText(fallasJ + "");
                    fallas_totalJ--;
                    limite_fallas.setText(fallas_totalJ + "");
                } else {
                    boton20.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/fondo.png")));
                    valor_boton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/fondo.png")));
                    fallasJ++;
                    fallas.setText(fallasJ + "");
                    fallas_totalJ--;
                    limite_fallas.setText(fallas_totalJ + "");
                    if (fallas_totalJ == 0) {
                        JOptionPane.showMessageDialog(null, "Acabaste el limite de fallas, GAME OVER");

                    }

                }

            
        }
                        }
        valor_ant = matrizJ[3][4];
        valor_boton = boton20;
        
        }
          });
                            

                        

                    timer.setRepeats(false);
                    timer.start();
    }//GEN-LAST:event_boton20ActionPerformed

    private void boton21ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_boton21ActionPerformed
        // TODO add your handling code here:
        
        boton21.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/icono" + matrizJ[4][0] + ".png"))); ///Asigna un icono nuevo al boton cuando cambia de estado.
        
        Timer timer = new Timer(3000, null);

        
          timer.addActionListener(new ActionListener() {
                        @Override
                        public void actionPerformed(ActionEvent evt) {
        if (matrizJ == null) {
            JOptionPane.showMessageDialog(null, "No generaste matriz, por favor dale a generar :3");
        } else {
            if (valor_ant == matrizJ[4][0] && matrizJ[4][0] != 0) {
                boton21.setEnabled(false);
                valor_boton.setEnabled(false);
                puntosJ++;
                puntos.setText(puntosJ + "");
            } else {
                if (matrizJ[4][0] == 0) {

                    JOptionPane.showMessageDialog(null, "Carta trampa, sumaste una falla >:D");
                    boton21.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/trampa.png"))); ///
                    boton21.setEnabled(false);
                    fallasJ++;
                    fallas.setText(fallasJ + "");
                    fallas_totalJ--;
                    limite_fallas.setText(fallas_totalJ + "");
                } else {
                    boton21.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/fondo.png")));
                    valor_boton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/fondo.png")));
                    fallasJ++;
                    fallas.setText(fallasJ + "");
                    fallas_totalJ--;
                    limite_fallas.setText(fallas_totalJ + "");
                    if (fallas_totalJ == 0) {
                        JOptionPane.showMessageDialog(null, "Acabaste el limite de fallas, GAME OVER");

                    }

                }

            
        }
                        }
        valor_ant = matrizJ[4][0];
        valor_boton = boton21;
        
        }
          });
                            

                        

                    timer.setRepeats(false);
                    timer.start();
    }//GEN-LAST:event_boton21ActionPerformed

    private void boton22ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_boton22ActionPerformed
        // TODO add your handling code here:
        
        boton22.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/icono" + matrizJ[4][1] + ".png"))); ///Asigna un icono nuevo al boton cuando cambia de estado.
        
        Timer timer = new Timer(3000, null);

        
          timer.addActionListener(new ActionListener() {
                        @Override
                        public void actionPerformed(ActionEvent evt) {
        if (matrizJ == null) {
            JOptionPane.showMessageDialog(null, "No generaste matriz, por favor dale a generar :3");
        } else {
            if (valor_ant == matrizJ[4][1] && matrizJ[4][1] != 0) {
                boton22.setEnabled(false);
                valor_boton.setEnabled(false);
                puntosJ++;
                puntos.setText(puntosJ + "");
            } else {
                if (matrizJ[4][1] == 0) {

                    JOptionPane.showMessageDialog(null, "Carta trampa, sumaste una falla >:D");
                    boton22.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/trampa.png"))); ///
                    boton22.setEnabled(false);
                    fallasJ++;
                    fallas.setText(fallas + "");
                    fallas_totalJ--;
                    limite_fallas.setText(fallas_totalJ + "");
                } else {
                    boton22.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/fondo.png")));
                    valor_boton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/fondo.png")));
                    fallasJ++;
                    fallas.setText(fallas + "");
                    fallas_totalJ--;
                    limite_fallas.setText(fallas_totalJ + "");
                    if (fallas_totalJ == 0) {
                        JOptionPane.showMessageDialog(null, "Acabaste el limite de fallas, GAME OVER");

                    }

                }

            
        }
                        }
        valor_ant = matrizJ[4][1];
        valor_boton = boton22;
        
        }
          });
                            

                        

                    timer.setRepeats(false);
                    timer.start();
    }//GEN-LAST:event_boton22ActionPerformed

    private void boton24ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_boton24ActionPerformed
        // TODO add your handling code here:
        boton24.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/icono" + matrizJ[4][3] + ".png"))); ///Asigna un icono nuevo al boton cuando cambia de estado.
       
       
        Timer timer = new Timer(3000, null);

        
          timer.addActionListener(new ActionListener() {
                        @Override
                        public void actionPerformed(ActionEvent evt) {
        if (matrizJ == null) {
            JOptionPane.showMessageDialog(null, "No generaste matriz, por favor dale a generar :3");
        } else {
            if (valor_ant == matrizJ[4][3] && matrizJ[4][3] != 0) {
                boton24.setEnabled(false);
                valor_boton.setEnabled(false);
                puntosJ++;
                puntos.setText(puntosJ + "");
            } else {
                if (matrizJ[4][3] == 0) {

                    JOptionPane.showMessageDialog(null, "Carta trampa, sumaste una falla >:D");
                    boton24.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/trampa.png"))); ///
                    boton24.setEnabled(false);
                    fallasJ++;
                    fallas.setText(fallasJ + "");
                    fallas_totalJ--;
                    limite_fallas.setText(fallas_totalJ + "");
                } else {
                    boton24.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/fondo.png")));
                    valor_boton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/fondo.png")));
                    fallasJ++;
                    fallas.setText(fallasJ + "");
                    fallas_totalJ--;
                    limite_fallas.setText(fallas_totalJ + "");
                    if (fallas_totalJ == 0) {
                        JOptionPane.showMessageDialog(null, "Acabaste el limite de fallas, GAME OVER");

                    }

                }

            
        }
                        }
        valor_ant = matrizJ[4][3];
        valor_boton = boton24;
        
        }
          });
                            

                        

                    timer.setRepeats(false);
                    timer.start();
    }//GEN-LAST:event_boton24ActionPerformed

    private void boton25ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_boton25ActionPerformed
        // TODO add your handling code here:
        
        boton25.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/icono" + matrizJ[4][4] + ".png"))); ///Asigna un icono nuevo al boton cuando cambia de estado.
        
        Timer timer = new Timer(3000, null);

        
          timer.addActionListener(new ActionListener() {
                        @Override
                        public void actionPerformed(ActionEvent evt) {
        if (matrizJ == null) {
            JOptionPane.showMessageDialog(null, "No generaste matriz, por favor dale a generar :3");
        } else {
            if (valor_ant == matrizJ[4][4] && matrizJ[4][4] != 0) {
                boton25.setEnabled(false);
                valor_boton.setEnabled(false);
                puntosJ++;
                puntos.setText(puntosJ + "");
            } else {
                if (matrizJ[4][4] == 0) {

                    JOptionPane.showMessageDialog(null, "Carta trampa, sumaste una falla >:D");
                    boton25.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/trampa.png"))); ///
                    boton25.setEnabled(false);
                    fallasJ++;
                    fallas.setText(fallasJ + "");
                    fallas_totalJ--;
                    limite_fallas.setText(fallas_totalJ + "");
                } else {
                    boton25.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/fondo.png")));
                    valor_boton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/fondo.png")));
                    fallasJ++;
                    fallas.setText(fallasJ + "");
                    fallas_totalJ--;
                    limite_fallas.setText(fallas_totalJ + "");
                    if (fallas_totalJ == 0) {
                        JOptionPane.showMessageDialog(null, "Acabaste el limite de fallas, GAME OVER");

                    }

                }

            
        }
                        }
        valor_ant = matrizJ[4][4];
        valor_boton = boton25;
        
        }
          });
                            

                        

                    timer.setRepeats(false);
                    timer.start();
    }//GEN-LAST:event_boton25ActionPerformed

    private void selectorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectorActionPerformed
        int selector=1;
        int selector2=2;
        int selector3=3;
    }//GEN-LAST:event_selectorActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Juego_interfas2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Juego_interfas2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Juego_interfas2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Juego_interfas2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Juego_interfas2().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton boton1;
    private javax.swing.JButton boton10;
    private javax.swing.JButton boton11;
    private javax.swing.JButton boton12;
    private javax.swing.JButton boton13;
    private javax.swing.JButton boton14;
    private javax.swing.JButton boton15;
    private javax.swing.JButton boton16;
    private javax.swing.JButton boton17;
    private javax.swing.JButton boton18;
    private javax.swing.JButton boton19;
    private javax.swing.JButton boton2;
    private javax.swing.JButton boton20;
    private javax.swing.JButton boton21;
    private javax.swing.JButton boton22;
    private javax.swing.JButton boton23;
    private javax.swing.JButton boton24;
    private javax.swing.JButton boton25;
    private javax.swing.JButton boton3;
    private javax.swing.JButton boton4;
    private javax.swing.JButton boton5;
    private javax.swing.JButton boton6;
    private javax.swing.JButton boton7;
    private javax.swing.JButton boton8;
    private javax.swing.JButton boton9;
    private javax.swing.JLabel etiquetade;
    private javax.swing.JLabel etiquetafalla;
    private javax.swing.JLabel etiquetanivel;
    private javax.swing.JLabel etiquetapuntos;
    private javax.swing.JTextField fallas;
    private javax.swing.JButton generar;
    private javax.swing.JButton iniciar;
    private javax.swing.JTextField limite_fallas;
    private javax.swing.JButton limpiar;
    private javax.swing.JButton pausar;
    private javax.swing.JTextField puntos;
    private javax.swing.JButton salir;
    private javax.swing.JComboBox<String> selector;
    // End of variables declaration//GEN-END:variables
}